
name: Build

on: [push, pull_request]

jobs:
  build:
    name: build-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-24.04]
      fail-fast: false
    steps:
      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v3
      - name: Add msbuild to PATH
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.0.2
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run:   |
              sudo apt update && sudo apt-get install build-essential git make cmake autoconf automake \
                libtool pkg-config libasound2-dev libpulse-dev libaudio-dev libjack-dev \
                libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev \
                libxinerama-dev libxxf86vm-dev libxss-dev libgl1-mesa-dev libdbus-1-dev \
                libudev-dev libgles2-mesa-dev libegl1-mesa-dev libibus-1.0-dev \
                fcitx-libs-dev libsamplerate0-dev libsndio-dev libwayland-dev \
                libxkbcommon-dev libdrm-dev libgbm-dev
        shell: bash
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Run CAKE
        run: dotnet run --project ./build/Build.csproj -- --universalBinary=true
        env:
          ACTIONS_RUNTIME_TOKEN: ${{ env.ACTIONS_RUNTIME_TOKEN }}
          ACTIONS_RUNTIME_URL: "${{ env.ACTIONS_RUNTIME_URL }}"
  deploy:
    name: deploy
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
    needs: [ build ]
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v3
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Run CAKE
        run: dotnet run --project ./build/Build.csproj -- --target=Package --universalBinary=true --libraryname=SDL --licensepath=sdl/LICENSE.txt
        env:
          ACTIONS_RUNTIME_TOKEN: ${{ env.ACTIONS_RUNTIME_TOKEN }}
          ACTIONS_RUNTIME_URL: "${{ env.ACTIONS_RUNTIME_URL }}"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Make a release
        uses: ncipollo/release-action@v1
        with:
          name: 'MonoGame.Library.SDL ${{ github.ref_name }}'
          tag: ${{ github.ref_name }}
          allowUpdates: true
          removeArtifacts: true
          artifacts: "bin/Release/*.nupkg"
          token: ${{ secrets.GITHUB_TOKEN }}
        if: github.ref_type == 'tag'

